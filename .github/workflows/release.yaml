name: Release
on: 
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: staging
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+-*

env:
  cache-version: v9

jobs:

  windows:
    strategy:
      matrix:
        go-version: [1.18.x]
        platform: [windows-latest]
        qtversion: [5.14.1]
    runs-on: ${{ matrix.platform }}
    env:
      GOPATH: C:\
      GOROOT: C:\go-root
      QT_VERSION: ${{ matrix.qtversion }}
      # QT_DIR: ${{ github.workspace }}\Qt
      QT_API: 5.13.0
      QT_MSYS2: true
      QT_MSYS2_DIR: D:\a\_temp\msys64\
      QT_MSYS2_STATIC: true
      QT_MSVC: false
      QT_DEBUG: false
      # QT_DEBUG_CONSOLE: true
      GO111MODULE: off
      CGO_CFLAGS_ALLOW: ".*" 
      CGO_CXXFLAGS_ALLOW: ".*" 
      CGO_LDFLAGS_ALLOW: ".*" 
      # CGO_ENABLED: 1
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:

    - name: Install Go
      continue-on-error: true
      run: |
        curl -sL --retry 10 --retry-delay 60 -O https://dl.google.com/go/go1.18.5.windows-amd64.zip
        expand-archive -path go1.18.5.windows-amd64.zip -destinationpath .
        Move-Item -Path go -Destination C:\go-root

    - name: Setup MSYS2 and install Qt5
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: mingw64
        install: mingw-w64-x86_64-toolchain
    - shell: msys2 {0}
      run: |
        pacman --noconfirm -S sed git unzip zip mingw-w64-x86_64-qt-creator mingw-w64-x86_64-qt5-static
        pacman -Scc
        pacman -Sc

    - name: Patch qt5
      shell: msys2 {0}
      run: | 
        curl -sL --retry 10 --retry-delay 60 -O https://github.com/akiyosi/github-actions-playground/releases/download/qt5-patched-qtbug-71737/qt-5.15.5_patched-qtbug71737.zip
        unzip qt-5.15.5_patched-qtbug71737.zip
        cp -fpR qt5/* /mingw64/qt5-static/
        rm -fr qt5
        rm qt-5.15.5_patched-qtbug71737.zip

    - name: Get Qt binding for Go
      run: |
        C:\go-root\bin\go.exe get -v -tags=no_env github.com/therecipe/qt/cmd/...

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: .\src\github.com\akiyosi\goneovim

    - name: Copy checkout repogitory 
      shell: msys2 {0}
      run: |
        mkdir -p /c/src/github.com/akiyosi
        cp -pR /d/a/goneovim/goneovim/src/github.com/akiyosi/goneovim /c/src/github.com/akiyosi/goneovim

    - name: Retrieve version
      id: version-windows
      run: |
        cd C:\src\github.com\akiyosi\goneovim
        echo "::set-output name=GONEOVIM_VERSION::$(git describe --tags)"

    - name: test version
      run: |
        echo ${{ steps.version-windows.outputs.GONEOVIM_VERSION }}

    - uses: actions/cache@v2
      id: cache-qt-bindings-windows
      with:
        path: |
          C:\src\github.com\therecipe\qt\*
          !C:\src\github.com\therecipe\qt\.git
        key: ${{ matrix.qtversion }}-qtbindings-windows-${{ env.cache-version }}

    - name: Generate Qt bindings
      if: ${{ steps.cache-qt-bindings-windows.outputs.cache-hit != 'true' }}
      shell: msys2 {0}
      run: |
        export PATH=$PATH:/c/bin:/c/go-root/bin:/d/a/_temp/msys64/usr/bin
        cp /c/bin/* /d/a/_temp/msys64/usr/bin
        cp /c/go-root/bin/go /d/a/_temp/msys64/usr/bin
        /c/bin/qtsetup -test=false

    - name: Get dependencies
      continue-on-error: true
      run: |
        go get -v -d github.com/${{ github.repository }}/...

    - name: Generate moc
      shell: msys2 {0}
      run: |
        export PATH=$PATH:/c/bin:/c/go-root/bin:/d/a/_temp/msys64/usr/bin
        cd /c/src/github.com/akiyosi/goneovim/
        cd ./cmd/goneovim
        /c/bin/qtmoc

    - name: Build for windows
      shell: msys2 {0}
      run: |
        export PATH=$PATH:/c/bin:/c/go-root/bin:/d/a/_temp/msys64/usr/bin
        cd /c/src/github.com/akiyosi/goneovim/cmd/goneovim
        /c/bin/qtdeploy -ldflags "-X github.com/akiyosi/goneovim/editor.Version=${{ steps.version-windows.outputs.GONEOVIM_VERSION }}" build desktop
        cp -pR ../../runtime ./deploy/windows/

    - if: github.event_name == 'workflow_dispatch'
      run: echo "ARCHIVE_NAME=goneovim-windows" >> $env:GITHUB_ENV
    - if: github.event_name == 'push'
      run: echo "ARCHIVE_NAME=goneovim-${{ steps.version-windows.outputs.GONEOVIM_VERSION }}-windows" >> $env:GITHUB_ENV

    - name: Archive
      shell: msys2 {0}
      run: |
        cd /c/src/github.com/akiyosi/goneovim/cmd/goneovim/deploy
        mv windows ${{ env.ARCHIVE_NAME }}
        zip -r ${{ env.ARCHIVE_NAME }}.zip ${{ env.ARCHIVE_NAME }}

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: goneovim-windows
        path: C:/src/github.com/akiyosi/goneovim/cmd/goneovim/deploy/${{ env.ARCHIVE_NAME }}.zip

  publish:
    needs: [windows]
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV

      - name: Set release subject
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (echo "SUBJECT=Goneovim $TAG_NAME";
           echo 'PRERELEASE=') >> $GITHUB_ENV

      - name: Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$SUBJECT" --target $GITHUB_SHA /home/runner/work/goneovim/goneovim/goneovim-windows/*


